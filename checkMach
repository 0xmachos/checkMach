#!/usr/bin/env zsh
# checkMach/checkMach

# checkMach
# Check the security properties of Mach-O executables
declare -r CHECKMACH_VERSION="v0.1.0"

set -euo pipefail
# -e exit if any command returns non-zero status code
# -u prevent using undefined variables
# -o pipefail force pipelines to fail on first non-zero status code

IFS=$'\n\t'
# Set Internal Field Separator to newlines and tabs
# This makes bash consider newlines and tabs as separating words
# See: http://redsymbol.net/articles/unofficial-bash-strict-mode/

### Define Colours ###
/usr/bin/tput sgr0; 
# reset colors
readonly RESET=$(/usr/bin/tput sgr0);
readonly BOLD=$(/usr/bin/tput bold);
readonly RED=$(/usr/bin/tput setaf 1);
### END Colours ###

function usage {

  /bin/echo -e "\\nCheck the security properties of a Mach-O executable\\n"
  /bin/echo -e "  Usage: ./checkMach /path/to/macho/binary\\n"

  exit 0
}


### Utility Functions ###
# macos_compatability_check
# get_codesign_flags
# get_codesign_bitmask

function macos_compatability_check {
  
  local os
  os="$(uname -s)"

  if [[ "${os}" != "Darwin" ]]; then 
    /bin/echo "[❌] This script was written for macOS"
    exit 1
  fi
}


function get_codesign_flags {
  # get_codesign_flags
  #   Executes codesign on a binary
  #   Parses comma seperated list of flags into an array
  local -r binary_path=${1:?No parameters passed to get_codesign_flags}
  local codesign_flags
  # declare -a flags

  codesign_flags=$(/usr/bin/codesign --display --verbose "${binary_path}" 2>&1 \
          | /usr/bin/awk 'FNR == 4 {print $4}' \
          | /usr/bin/awk -F '[(|)]' '{print $2}')
    # codesign prints to stderr; redirect stderr to stdout 
    # Select line 4, print 4th column of 4th line
    # Use characters between () as IFS, print column 2
  
  local IFS=,
  # Set IFS to comma (,)
  read -ra flags <<< "${codesign_flags}"
  # Reads contents of $codesign_flags into array $flags
}


function get_codesign_bitmask {

  local -r binary_path=${1:?No parameters passed to get_codesign_bitmask}

  bitmask=$(/usr/bin/codesign --display --verbose "${binary_path}" 2>&1 \
          | /usr/bin/awk 'FNR == 4 {print $4}' \
          | /usr/bin/awk -F '[=|(]' '{print $2}')
  # Use characters between =( as IFS, print column 2
}


### END UTILITY FUNCTIONS ###


function check_aslr {

  if /usr/bin/otool -hv "${1}" | /usr/bin/grep -q 'PIE'; then
    /bin/echo "ASLR/ PIE: ✅"
  else
    /bin/echo "ASLR/ PIE: ❌"
  fi
}


############################ 


function main {

  macos_compatability_check
  # Check the system is running macOS 

  local -r binary_path=${1:-"usage"}
  declare -a flags
  declare bitmask

  trap ctrl_c SIGINT
  # Detect and react to the user hitting CTRL + C

  if [[ "${binary_path}" == "usage" ]]; then
    usage
  fi

}

main "$@"
