#!/usr/bin/env zsh
# checkMach/checkMach

# checkMach
# Check the security properties of Mach-O executables
declare -r CHECKMACH_VERSION="v0.1.0"

set -euo pipefail
# -e exit if any command returns non-zero status code
# -u prevent using undefined variables
# -o pipefail force pipelines to fail on first non-zero status code

IFS=$'\n\t'
# Set Internal Field Separator to newlines and tabs
# This makes bash consider newlines and tabs as separating words
# See: http://redsymbol.net/articles/unofficial-bash-strict-mode/

### Define Colours ###
/usr/bin/tput sgr0; 
# reset colors
readonly RESET=$(/usr/bin/tput sgr0);
readonly BOLD=$(/usr/bin/tput bold);
readonly RED=$(/usr/bin/tput setaf 1);
### END Colours ###

function usage {

  echo -e "\\nCheck the security properties of a Mach-O executable\\n"
  echo -e "  Usage: ./checkMach /path/to/macho/binary\\n"

  exit 0
}


### Utility Functions ###
# macos_compatability_check
# get_codesign_flags
# get_codesign_bitmask
# check_is_file
# check_is_macho


function macos_compatability_check {
  
  local os
  os="$(/usr/bin/uname -s)"

  if [[ "${os}" != "Darwin" ]]; then 
    echo "[❌] This script was written for macOS"
    exit 1
  fi
}


function get_codesign_flags {
  # get_codesign_flags
  #   Executes codesign on a binary
  #   Parses comma seperated list of flags into an array
  local -r unsafe_user_path=${1:?No parameters passed to get_codesign_flags}
  local codesign_flags
  # declare -a flags

  codesign_flags=$(/usr/bin/codesign --display --verbose "${unsafe_user_path}" 2>&1 \
          | /usr/bin/awk 'FNR == 4 {print $4}' \
          | /usr/bin/awk -F '[(|)]' '{print $2}')
    # codesign prints to stderr; redirect stderr to stdout 
    # Select line 4, print 4th column of 4th line
    # Use characters between () as IFS, print column 2
  
  local IFS=,
  # Set IFS to comma (,)
  read -ra flags <<< "${codesign_flags}"
  # Reads contents of $codesign_flags into array $flags
}


function get_codesign_bitmask {
  # get_codesign_bitmask
  #   Executes codesign on a binary
  #   Extract flags bitmask value from CodeDirectory line
  local -r unsafe_user_path=${1:?No parameters passed to get_codesign_bitmask}

  bitmask=$(/usr/bin/codesign --display --verbose "${unsafe_user_path}" 2>&1 \
          | /usr/bin/awk 'FNR == 4 {print $4}' \
          | /usr/bin/awk -F '[=|(]' '{print $2}')
  # codesign prints to stderr; redirect stderr to stdout
  # Select line 4, print 2nd column of 4th line
  # Use characters between =( as IFS, print column 2
}


function check_is_file {
  # check_is_file
  #   Check if the supplied path ($unsafe_user_path)
  #   is a regular file not a directory or device file

  local -r unsafe_user_path=${1:?No parameters passed to check_is_file}

  if [[ ! -f "${unsafe_user_path}" ]]; then 
    echo "[❌] ${unsafe_user_path} is not a file"
    return 1
  fi
}


function check_is_macho {
  # check_is_macho
  #   Check if the supplied path ($unsafe_user_path)
  #   is a mach-o file 

  local -r unsafe_user_path=${1:?No parameters passed to check_is_macho}

  if ! /usr/bin/file "${unsafe_user_path}" | /usr/bin/grep -q 'Mach-O'; then
    echo "[❌] ${unsafe_user_path} is not a Mach-O"
    return 1
  fi
}


### END UTILITY FUNCTIONS ###


function check_aslr {

  if /usr/bin/otool -hv "${macho_path}" | /usr/bin/grep -q 'PIE'; then
    echo "ASLR/ PIE: ✅"
  else
    echo "ASLR/ PIE: ❌"
  fi
}

# - permissions
# - executable?
#   - who can exec it 
# AGAINST - permissions arent a binary security mesuare not aligend witrh checksec

############################ 


function main {

  macos_compatability_check
  # Check the system is running macOS 

  declare -r unsafe_user_path=${1:-"usage"}
  declare -a flags
  declare bitmask

  trap ctrl_c SIGINT
  # Detect and react to the user hitting CTRL + C

  if [[ "${unsafe_user_path}" == "usage" ]]; then
    usage
  fi

  check_is_file "${binary_path}"
  check_is_macho "${binary_path}"
}

main "$@"
